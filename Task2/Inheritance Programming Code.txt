JAVA PROGRAMMING CODE FOR INHERITANCE : 

SINGLE LEVEL INHERITANCE : 
 
class student
{
String name;
int colour ;
void input()
{
System.out.println("Enter colour:");
}
}
class lotus extends flower
{
void disp()
{
colour=rose; name=lotus
System.out.println("colour value=" +b);
}
}
class K
{
public static void main(String[] args)
{
lotus l=new lotus();
l.input(); l.disp();
}
}

MULTILEVEL INHERITANCE :

class A
{
 int a=10;
void input()
{
System.out.println("A");
}
}
class B extends A
{
int b=20;
void show()
{
System.out.println("B");
}
}
class C extends B
int C=30;
void display()
{
System.out.println("C");
}
}
class M
{
public static void main(String[] args)
{
C.obj=new C();
obj.input();
obj.show();
obj.display();
}
}

HIERARCHICAL INHERITANCE :

class A 
{
int a=20;
void input()
{
System.out.println("A");
}
}
class B extends A
{
int b=30;
void show()
{
System.out.println("B");
}
}
class C extends A
{
int C=40;
void display();
{
System.out.println("C");
}
}
class H
{
public static void main(String[] args)
C.obj1 = new C(); 
obj1.display();
obj1.input();
B.obj2 = new B();
obj2.show();
obj2.input();
}
}

MULTIPLE INHERITANCE :

interface A;
{
void show()
}
interface B;
{
void disp() 
}
Class C implements A, B
{
Public void show()

{
System.out.println("Interface A");
}
Public void disp()
{
System.out.println(“Interface B”);
}
Public static void main(String[] args) {
C m=new C();
m.show(); m.disp();
}
}

HYBRID INHERITANCE :

class A
{
A()
{
    System.out.println(“Constructor of class A”);
}
}
class B extends A
{
B()
{
System.out.println(“Constructor of class B”);
}
}
class C extends A
{
C()
{
System.out.println(“Constructor of class C”);
}
}
class D extends B 
{
D()
{
System.out.println(“Constructor of class D”);
}
}
class Hybrid
{
Public static void main(String[] args)
{
D.obj1 = new D();
}
}








 

